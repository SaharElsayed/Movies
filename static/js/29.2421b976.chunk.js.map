{"version":3,"sources":["containers/search/Search.js"],"names":["Search","fetchList","searchKey","props","fetchMoviesRequest","setSearchKeyword","key","activeTab","search","page","query","keyword","this","computedMatch","params","prevProps","nextKeyword","searchKeyword","title","results","list","Fragment","fallback","pageTitle","length","subTitle","React","Component","mapDispatchToProps","actions","connect","state"],"mappings":"8bAMMA,E,2MAcJC,UAAY,SAAAC,GAAc,IAAD,EAC8C,EAAKC,MAAlEC,EADe,EACfA,mBAAoBC,EADL,EACKA,iBAA+BC,EADpC,EACuBC,UAAaD,IAC3DD,EAAiB,CAAEG,OAAQN,IAC3BE,EAAmBE,EAAK,CACtBG,KAAM,EACNC,MAAOR,K,mFAlBU,IACXS,EAAYC,KAAKT,MAAMU,cAAcC,OAArCH,QACRC,KAAKX,UAAUU,K,yCAGEI,GAAY,IACeC,EAAoBJ,KAAKT,MAA7DU,cAAiBC,OAAUH,QAE/BK,IAD+CD,EAA3CF,cAAiBC,OAAUH,SAEjCC,KAAKX,UAAUe,K,+BAaT,IAAD,EACwEJ,KAAKT,MAA3DK,EADlB,EACCS,cAAiBT,OAAuBU,EADzC,EAC4BX,UAAaW,MAAiBC,EAD1D,EACkDC,KAAQD,QACjE,OACE,kBAAC,IAAME,SAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CAAwBJ,MAAK,UAAKV,EAAL,uBAC7B,kBAAC,IAAD,CACEe,UAA8B,IAAlBf,EAAOgB,OAAgBN,EAASC,GAAWA,EAAQK,OAAS,EAAKhB,EAAS,IACtFiB,SAA6B,IAAlBjB,EAAOgB,OAAgB,SAAahB,EAAOgB,OAAS,GAAOL,GAAWA,EAAQK,OAAS,EAAM,iBAAmB,Y,GA/BlHE,IAAMC,WAuCrBC,EAAqB,CACzBvB,iBAAkBwB,IAClBzB,mBAAoByB,KAMPC,uBAHS,SAAAC,GACtB,O,yVAAO,CAAP,GAAYA,KAE0BH,EAAzBE,CAA6C9B","file":"static/js/29.2421b976.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/index';\r\nimport * as LazyComponent from './../../utils/LazyLoaded';\r\nimport Loader from './../../components/loader/Loader';\r\n\r\nclass Search extends React.Component {\r\n  componentDidMount() {    \r\n    const { keyword } = this.props.computedMatch.params;\r\n    this.fetchList(keyword);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { computedMatch: { params: { keyword: nextKeyword } } } = this.props;\r\n    const { computedMatch: { params: { keyword } } } = prevProps;\r\n    if (nextKeyword !== keyword) {\r\n      this.fetchList(nextKeyword)\r\n    }\r\n  }\r\n\r\n  fetchList = searchKey => {\r\n    const { fetchMoviesRequest, setSearchKeyword, activeTab: { key } } = this.props;\r\n    setSearchKeyword({ search: searchKey });\r\n    fetchMoviesRequest(key, {\r\n      page: 1,\r\n      query: searchKey\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { searchKeyword: { search }, activeTab: { title }, list: { results } } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Suspense fallback={<Loader />}>\r\n          <LazyComponent.TabTitle title={`${search} - Search results`} />\r\n          <LazyComponent.MoviesList\r\n            pageTitle={(search.length === 0) ? title : (results && results.length > 0) ? search : ' '}\r\n            subTitle={(search.length === 0) ? 'MOVIES' : ((search.length > 0) && (results && results.length > 0)) ? 'SEARCH RESULTS' : ' '}\r\n          />\r\n        </Suspense>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setSearchKeyword: actions.setSearchKeyword,\r\n  fetchMoviesRequest: actions.fetchMoviesRequest\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { ...state }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);"],"sourceRoot":""}