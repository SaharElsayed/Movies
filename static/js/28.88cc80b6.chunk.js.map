{"version":3,"sources":["containers/movieSingle/MovieSingle.js"],"names":["MovieSingle","fetchSingle","id","props","fetchSingleMovieRequest","fetchCastRequest","fetchRecommendedRequest","append_to_response","page","this","computedMatch","params","prevProps","nextId","movie","cast","Fragment","fallback","title","original_title","pageTitle","recommended","emptyTitle","emptyStatement","emptySrc","React","Component","mapDispatchToProps","actions","fetchActiveTab","connect","state","singleMovie"],"mappings":"oNAMMA,E,2MAcJC,YAAc,SAAAC,GAAO,IAAD,EAC6D,EAAKC,MAA5EC,EADU,EACVA,wBAAyBC,EADf,EACeA,iBAAkBC,EADjC,EACiCA,wBACnDF,EAAwBF,EAAI,CAC1BK,mBAAoB,WAEtBF,EAAiBH,GACjBI,EAAwBJ,EAAI,CAC1BM,KAAM,K,mFApBW,IACgBN,EAAWO,KAAKN,MAA3CO,cAAiBC,OAAUT,GACnCO,KAAKR,YAAYC,K,yCAGAU,GAAY,IACUC,EAAeJ,KAAKN,MAAnDO,cAAiBC,OAAUT,GAE/BW,IAD0CD,EAAtCF,cAAiBC,OAAUT,IAEjCO,KAAKR,YAAYY,K,+BAeX,IAAD,EACiBJ,KAAKN,MAArBW,EADD,EACCA,MAAOC,EADR,EACQA,KACf,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CAAwBC,MAAK,UAAKJ,EAAMK,eAAX,sBAC7B,kBAAC,IAAD,CAA0BL,MAAOA,EAAOC,KAAMA,IAC9C,kBAAC,IAAD,CACEK,UAAU,cACVC,aAAW,EACXC,WAAW,SACXC,eAAe,qCACfC,SAAS,iC,GArCKC,IAAMC,WA6C1BC,EAAqB,CACzBvB,wBAAyBwB,IACzBvB,iBAAkBuB,IAClBtB,wBAAyBsB,IACzBC,eAAgBD,KAQHE,uBALS,SAACC,GAAD,MAAY,CAClCjB,MAAOiB,EAAMC,YAAYlB,MACzBC,KAAMgB,EAAMC,YAAYjB,QAGcY,EAAzBG,CAA6C9B","file":"static/js/28.88cc80b6.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/index';\r\nimport * as LazyComponent from './../../utils/LazyLoaded';\r\nimport Loader from './../../components/loader/Loader';\r\n\r\nclass MovieSingle extends React.Component {\r\n  componentDidMount() {\r\n    const { computedMatch: { params: { id } } } = this.props;\r\n    this.fetchSingle(id);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { computedMatch: { params: { id: nextId } } } = this.props;\r\n    const { computedMatch: { params: { id } } } = prevProps;\r\n    if (nextId !== id) {\r\n      this.fetchSingle(nextId)\r\n    }\r\n  }\r\n\r\n  fetchSingle = id => {\r\n    const { fetchSingleMovieRequest, fetchCastRequest, fetchRecommendedRequest } = this.props;\r\n    fetchSingleMovieRequest(id, {\r\n      append_to_response: 'videos'\r\n    });\r\n    fetchCastRequest(id);\r\n    fetchRecommendedRequest(id, {\r\n      page: 1\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { movie, cast } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Suspense fallback={<Loader />}>\r\n          <LazyComponent.TabTitle title={`${movie.original_title} - Movie Library`} />\r\n          <LazyComponent.CardSingle movie={movie} cast={cast} />\r\n          <LazyComponent.MoviesList\r\n            pageTitle=\"recommended\"\r\n            recommended\r\n            emptyTitle='Sorry!'\r\n            emptyStatement='There are no recommended movies...'\r\n            emptySrc='/assets/svgs/empty.svg'\r\n          />\r\n        </Suspense>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  fetchSingleMovieRequest: actions.fetchSingleMovieRequest,\r\n  fetchCastRequest: actions.fetchCastRequest,\r\n  fetchRecommendedRequest: actions.fetchRecommendedRequest,\r\n  fetchActiveTab: actions.fetchActiveTab\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  movie: state.singleMovie.movie,\r\n  cast: state.singleMovie.cast\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSingle);"],"sourceRoot":""}