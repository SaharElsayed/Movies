{"version":3,"sources":["components/sorting/Sorting.js"],"names":["options","value","label","Sorting","props","handleChange","selectedOption","fetchMoviesRequest","setSorting","activeTab","key","id","search","searchKeyword","artistID","artist","setState","sortingKey","page","with_genres","query","sort_by","with_cast","state","this","onChange","theme","colors","primary25","primary","React","Component","mapDispatchToProps","actions","connect"],"mappings":"qxBAMA,IAAMA,EAAU,CACd,CAAEC,MAAO,kBAAmBC,MAAO,cACnC,CAAED,MAAO,oBAAqBC,MAAO,iBACrC,CAAED,MAAO,qBAAsBC,MAAO,SACtC,CAAED,MAAO,oBAAqBC,MAAO,iBAGjCC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,SAAAC,GAAmB,IAAD,EAO3B,EAAKF,MALPG,EAF6B,EAE7BA,mBACAC,EAH6B,EAG7BA,WAH6B,IAI7BC,UAAaC,EAJgB,EAIhBA,IAAKC,EAJW,EAIXA,GACDC,EALY,EAK7BC,cAAiBD,OACHE,EANe,EAM7BC,OAAUJ,GAGZ,EAAKK,SAAS,CAAEV,mBAChBE,EAAW,CAAES,WAAYX,EAAeL,QACxCM,EAAmBG,EAAK,CACtBQ,KAAM,EACNC,YAAcT,GAAOI,EAAY,GAAKH,EACtCS,MAAOR,GAAkB,GACzBS,QAASf,EAAeL,MACxBqB,UAAWR,GAAsB,MArBnC,EAAKS,MAAQ,CACXjB,eAAgBN,EAAQ,IAHT,E,sEA2BT,IACAM,EAAmBkB,KAAKD,MAAxBjB,eACR,OACE,kBAAC,IAAD,CACEL,MAAOK,EACPmB,SAAUD,KAAKnB,aACfL,QAASA,EACT0B,MAAO,SAAAA,GAAK,YACPA,EADO,CAEVC,OAAO,EAAD,GACDD,EAAMC,OADL,CAEJC,UAAW,0BACXC,QAAS,qB,GAxCCC,IAAMC,WAgDtBC,EAAqB,CACzBxB,WAAYyB,IACZ1B,mBAAoB0B,KAOPC,uBAJS,SAAAX,GACtB,OAAO,EAAP,GAAYA,KAG0BS,EAAzBE,CAA6C/B,I","file":"static/js/18.6a9a135c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/index';\r\nimport './Sorting.scss';\r\n\r\nconst options = [\r\n  { value: 'popularity.desc', label: 'Popularity' },\r\n  { value: 'vote_average.desc', label: 'Votes Average' },\r\n  { value: 'original_title.asc', label: 'Title' },\r\n  { value: 'release_date.desc', label: 'Release Date' }\r\n];\r\n\r\nclass Sorting extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedOption: options[0]\r\n    };\r\n  }\r\n\r\n  handleChange = selectedOption => {\r\n    const {\r\n      fetchMoviesRequest,\r\n      setSorting,\r\n      activeTab: { key, id },\r\n      searchKeyword: { search },\r\n      artist: { id: artistID }\r\n    } = this.props;\r\n    \r\n    this.setState({ selectedOption });\r\n    setSorting({ sortingKey: selectedOption.value });\r\n    fetchMoviesRequest(key, {\r\n      page: 1,\r\n      with_genres: (key && artistID) ? '' : id,\r\n      query: search ? search : '',\r\n      sort_by: selectedOption.value,\r\n      with_cast: artistID ? artistID : ''\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n    return (\r\n      <Select\r\n        value={selectedOption}\r\n        onChange={this.handleChange}\r\n        options={options}\r\n        theme={theme => ({\r\n          ...theme,\r\n          colors: {\r\n            ...theme.colors,\r\n            primary25: 'rgba(84, 110, 122, 0.5)',\r\n            primary: '#37474f',\r\n          },\r\n        })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setSorting: actions.setSorting,\r\n  fetchMoviesRequest: actions.fetchMoviesRequest\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { ...state };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sorting);"],"sourceRoot":""}